["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$puget.color","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$dispatch",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/enyert/Projects/gaiwan/puget/src/puget/color.cljc","~:line",23,"~:column",7,"~:end-line",23,"~:end-column",15,"~:arglists",["~#list",["~$quote",["^E",[["~$options","~$element","~$text"]]]]],"~:doc","Dispatches to coloring multimethods. Element should be a key from\n  the color-scheme map."],"^5","~$puget.color/dispatch","^?","/home/enyert/Projects/gaiwan/puget/src/puget/color.cljc","^C",15,"~:method-params",["^E",[["^G","^H","^I"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"~:variadic?",false,"^@",23,"~:ret-tag",["^4",["~$any","~$clj-nil"]],"^B",23,"~:max-fixed-arity",3,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G","^H","^I"]]]]],"^J","Dispatches to coloring multimethods. Element should be a key from\n  the color-scheme map."],"~$document",["^ ","^>",["^ ","^?","/home/enyert/Projects/gaiwan/puget/src/puget/color.cljc","^@",31,"^A",11,"^B",31,"^C",19,"^J","Constructs a pretty print document, which may be colored if\n  `:print-color` is true."],"^5","~$puget.color/document","^?","/home/enyert/Projects/gaiwan/puget/src/puget/color.cljc","^C",19,"^A",1,"^@",31,"^B",31,"~:tag","~$cljs.core/MultiFn","^J","Constructs a pretty print document, which may be colored if\n  `:print-color` is true."],"^I",["^ ","^>",["^ ","^?","/home/enyert/Projects/gaiwan/puget/src/puget/color.cljc","^@",37,"^A",11,"^B",37,"^C",15,"^J","Produces text colored according to the active color scheme. This is mostly\n  useful to clients which want to produce output which matches data printed by\n  Puget, but which is not directly printed by the library. Note that this\n  function still obeys the `:print-color` option."],"^5","~$puget.color/text","^?","/home/enyert/Projects/gaiwan/puget/src/puget/color.cljc","^C",15,"^A",1,"^@",37,"^B",37,"^W","^X","^J","Produces text colored according to the active color scheme. This is mostly\n  useful to clients which want to produce output which matches data printed by\n  Puget, but which is not directly printed by the library. Note that this\n  function still obeys the `:print-color` option."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^G","^I","~:default","~:ns","^5","^?","^C","^H","^A","^K","^@","~:color-markup","~:print-color","^B","^<","^D","~:hierarchy","^J","^6","~:test"]],"~:order",["^15","^14","^16","^K","^13","^5","^?","^C","^A","^@","^B","^D","^J","^17","^6","^<","^G","^H","^I","^12"]],"^J","Coloring multimethods to format text by adding markup.\n\n  #### Color Options\n\n  `:print-color`\n\n  When true, ouptut colored text from print functions.\n\n  `:color-markup`\n\n  - `:ansi` for color terminal text (default)\n  - `:html-inline` for inline-styled html\n  - `:html-classes` for html with semantic classes\n\n  `:color-scheme`\n\n  Map of syntax element keywords to color codes.\n  "]