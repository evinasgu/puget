["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$arrangement.core","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$type-predicates",["^ ","~:meta",["^ ","~:file","/home/enyert/Projects/gaiwan/puget/.cljs_node_repl/arrangement/core.cljc","~:line",5,"~:column",16,"~:end-line",5,"~:end-column",31,"~:private",true],"^C",true,"^5","~$arrangement.core/type-predicates","^>",".cljs_node_repl/arrangement/core.cljc","^B",31,"^@",1,"^?",5,"^A",5,"~:tag","~$cljs.core/IVector","~:doc","Ordered sequence of predicates to test to determine the relative ordering of\n  various data types."],"~$type-priority",["^ ","~:protocol-inline",null,"^=",["^ ","^>","/home/enyert/Projects/gaiwan/puget/.cljs_node_repl/arrangement/core.cljc","^?",22,"^@",8,"^A",22,"^B",21,"^C",true,"~:arglists",["~#list",["~$quote",["^K",[["~$x"]]]]],"^G","Determines a numeric priority for the given value based on its general\n  type. See `type-predicates` for the ordering."],"^C",true,"^5","~$arrangement.core/type-priority","^>",".cljs_node_repl/arrangement/core.cljc","^B",21,"~:method-params",["^K",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^@",1,"~:variadic?",false,"^?",22,"~:ret-tag","~$number","^A",22,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["~$x"]]]]],"^G","Determines a numeric priority for the given value based on its general\n  type. See `type-predicates` for the ordering."],"~$directly-comparable?",["^ ","^I",null,"^=",["^ ","^>","/home/enyert/Projects/gaiwan/puget/.cljs_node_repl/arrangement/core.cljc","^?",35,"^@",8,"^A",35,"^B",28,"^C",true,"^J",["^K",["^L",["^K",[["~$p"]]]]],"^G","True if the values in a certain priority class are directly comparable."],"^C",true,"^5","~$arrangement.core/directly-comparable?","^>",".cljs_node_repl/arrangement/core.cljc","^B",28,"^N",["^K",[["~$p"]]],"^O",null,"^P",["^K",[null,null]],"^@",1,"^Q",false,"^?",35,"^R","~$boolean","^A",35,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["~$p"]]]]],"^G","True if the values in a certain priority class are directly comparable."],"~$type-name",["^ ","^I",null,"^=",["^ ","^>","/home/enyert/Projects/gaiwan/puget/.cljs_node_repl/arrangement/core.cljc","^?",41,"^@",8,"^A",41,"^B",17,"^C",true,"^J",["^K",["^L",["^K",[["~$x"]]]]],"^G","Get the type of the given object as a string. For Clojure, gets the name of\n  the class of the object. For ClojureScript, gets either the `name` attribute\n  or the protocol name if the `name` attribute doesn't exist."],"^C",true,"^5","~$arrangement.core/type-name","^>",".cljs_node_repl/arrangement/core.cljc","^B",17,"^N",["^K",[["~$x"]]],"^O",null,"^P",["^K",[null,null]],"^@",1,"^Q",false,"^?",41,"^R",["^4",["~$any","~$string"]],"^A",41,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["~$x"]]]]],"^G","Get the type of the given object as a string. For Clojure, gets the name of\n  the class of the object. For ClojureScript, gets either the `name` attribute\n  or the protocol name if the `name` attribute doesn't exist."],"~$rank",["^ ","^I",null,"^=",["^ ","^>","/home/enyert/Projects/gaiwan/puget/.cljs_node_repl/arrangement/core.cljc","^?",74,"^@",7,"^A",74,"^B",11,"^J",["^K",["^L",["^K",[["~$a","~$b"]]]]],"^G","Comparator function that provides a total ordering of EDN values. Values of\n  different types sort in order of their types, per `type-priority`. `false`\n  is before `true`, numbers are ordered by magnitude regardless of type, and\n  characters, strings, keywords, and symbols are ordered lexically.\n\n  Sequential collections are sorted by comparing their elements one at a time.\n  If the sequences have equal leading elements, the longer one is ordered later.\n  Sets are compared by cardinality first, then elements in sorted order.\n  Finally, maps are compared by their entries in sorted order of their keys.\n\n  All other types are sorted by class name. If the class implements\n  `Comparable`, the instances of it are compared using `compare`. Otherwise, the\n  values are ordered by print representation. This has the default behavior of\n  ordering by hash code if the type does not implement a custom print format."],"^5","~$arrangement.core/rank","^>",".cljs_node_repl/arrangement/core.cljc","^B",11,"^N",["^K",[["~$a","~$b"]]],"^O",null,"^P",["^K",[null,null]],"^@",1,"^Q",false,"^?",74,"^R",["^4",["^[","^S"]],"^A",74,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["~$a","~$b"]]]]],"^G","Comparator function that provides a total ordering of EDN values. Values of\n  different types sort in order of their types, per `type-priority`. `false`\n  is before `true`, numbers are ordered by magnitude regardless of type, and\n  characters, strings, keywords, and symbols are ordered lexically.\n\n  Sequential collections are sorted by comparing their elements one at a time.\n  If the sequences have equal leading elements, the longer one is ordered later.\n  Sets are compared by cardinality first, then elements in sorted order.\n  Finally, maps are compared by their entries in sorted order of their keys.\n\n  All other types are sorted by class name. If the class implements\n  `Comparable`, the instances of it are compared using `compare`. Otherwise, the\n  values are ordered by print representation. This has the default behavior of\n  ordering by hash code if the type does not implement a custom print format."],"~$compare-seqs",["^ ","^I",null,"^=",["^ ","^>","/home/enyert/Projects/gaiwan/puget/.cljs_node_repl/arrangement/core.cljc","^?",57,"^@",8,"^A",57,"^B",20,"^C",true,"^J",["^K",["^L",["^K",[["~$xs","~$ys"]]]]],"^G","Compare sequences using the given comparator. If any element of the\n  sequences orders differently, it determines the ordering. Otherwise, if the\n  prefix matches, the longer sequence sorts later."],"^C",true,"^5","~$arrangement.core/compare-seqs","^>",".cljs_node_repl/arrangement/core.cljc","^B",20,"^N",["^K",[["^14","^15"]]],"^O",null,"^P",["^K",[null,null]],"^@",1,"^Q",false,"^?",57,"^R",["^4",["^[","^S"]],"^A",57,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["^14","^15"]]]]],"^G","Compare sequences using the given comparator. If any element of the\n  sequences orders differently, it determines the ordering. Otherwise, if the\n  prefix matches, the longer sequence sorts later."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:else"]],"~:order",["^1;"]],"^G","This namespace provides a total-ordering comparator for Clojure values."]